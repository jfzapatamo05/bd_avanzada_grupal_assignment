
--2. Crear una vista llamada "plan_mantenimiento_detallado"
create or replace view plan_mantenimiento_detallado as
select r.kilometraje_revision as Kilometraje,opr.operacion as Item from revisiones r inner join operaciones_revisiones opr
on r.id=opr.id_revision;

select * from plan_mantenimiento_detallado where kilometraje=10000;

---3. Crear un procedimiento almacenado llamado "Programar_mantenimiento"

CREATE OR REPLACE PROCEDURE PROGRAMAR_MANTENIMIENTO (P_ID_VEHICULO in VEHICULOS.ID%TYPE,V_KILOMETROS in VEHICULOS.KILOMETRAJE%TYPE) AS

--V_KILOMETROS VEHICULOS.KILOMETRAJE%TYPE;
V_CENTRO_RECIBO CENTRO_RECIBOS.NOMBRE%TYPE;
V_ID_MANT MANTENIMIENTOS.ID%TYPE;
KILOMETROS_FALTANTES FLOAT := 0;
EXC_ID_VEHICULO_NO_VALIDO EXCEPTION;


BEGIN

        IF P_ID_VEHICULO <=0 THEN
            RAISE EXC_ID_VEHICULO_NO_VALIDO;
        END IF;
        
    SELECT MAX(ID) INTO V_ID_MANT FROM mantenimientos;

    --SELECT c.nombre INTO V_CENTRO_RECIBO
    --FROM  CENTRO_RECIBOS C
    -- ON C.ID=V.ID_CENTRO_RECIBO
    -- WHERE V.ID = P_ID_VEHICULO 
    --GROUP BY C.NOMBRE;
        
	IF V_KILOMETROS <= 5000 THEN KILOMETROS_FALTANTES := (5000- V_KILOMETROS); 
	ELSIF V_KILOMETROS > 5000 AND V_KILOMETROS <= 10000 THEN KILOMETROS_FALTANTES := 10000 - V_KILOMETROS;
	ELSIF V_KILOMETROS > 10000 AND V_KILOMETROS <= 20000 THEN KILOMETROS_FALTANTES := 20000 - V_KILOMETROS;
	ELSIF V_KILOMETROS > 20000 AND V_KILOMETROS <= 40000 THEN KILOMETROS_FALTANTES := 40000 - V_KILOMETROS;
	ELSIF V_KILOMETROS > 40000 AND V_KILOMETROS <= 50000 THEN KILOMETROS_FALTANTES := 50000- V_KILOMETROS;
	ELSIF V_KILOMETROS > 50000 AND V_KILOMETROS <= 100000 THEN KILOMETROS_FALTANTES := 100000- V_KILOMETROS;
	END IF;  

	IF KILOMETROS_FALTANTES < 200 THEN 
        INSERT INTO MANTENIMIENTOS (ID,FECHA_MANTENIMIENTO,HORA_ENTRADA,HORA_SALIDA,ID_EMPLEADO,ESTADO,OBSERVACIONES,ID_VEHICULO,ID_REVISION)
        VALUES (V_ID_MANT+1,TO_DATE(SYSDATE +2,'dd/mm/yyyy'),TO_DATE('','HH24:MI:SS'),TO_DATE('','HH24:MI:SS'),4,'NO REALIZADO','',P_ID_VEHICULO,2);
        DBMS_OUTPUT.PUT_LINE('MANTENIMIENTO PROGRAMADO CON ÉXITO');
 
    ELSE 
    DBMS_OUTPUT.PUT_LINE('NO ES POSIBLE PROGRAMAR EL PROXIMO MANTENIMIENTO POR QUE FALTAN : ' || KILOMETROS_FALTANTES || ' KILOMETROS'  );
 
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('KILOMETROS: ' || V_KILOMETROS);
    DBMS_OUTPUT.PUT_LINE('KILOMETROS FALTANTES: ' || KILOMETROS_FALTANTES);
    DBMS_OUTPUT.PUT_LINE('CENTRO DE RECIBO: ' || V_CENTRO_RECIBO);
    DBMS_OUTPUT.PUT_LINE('ID MANTENIMIENTO: ' || V_ID_MANT);
    
    EXCEPTION
        WHEN EXC_ID_VEHICULO_NO_VALIDO THEN
        RAISE_APPLICATION_ERROR(-20001,'ID DE VEHICULO NO VALIDO');
END;

execute PROGRAMAR_MANTENIMIENTO(6,79613);

SELECT * FROM vehiculos;

--4.Crear un trigger sobre la tabla de los vehículos, cuando cambie el kilometraje de vehículo deberá invocar el 
--procedimiento "Programar_mantenimiento"
CREATE OR REPLACE TRIGGER MANTENIMIENTOS AFTER UPDATE OR INSERT ON VEHICULOS FOR EACH ROW
BEGIN
    PROGRAMAR_MANTENIMIENTO(:OLD.ID,:OLD.KILOMETRAJE);
END;

UPDATE VEHICULOS SET KILOMETRAJE= 99976 WHERE ID=20;

SELECT * FROM MANTENIMIENTOS;

--5. la junta directiva desea realizar un cotizador de precios de los envíos
CREATE TABLE COTIZADOR_PRECIOS (
	ID INTEGER PRIMARY KEY,
	CENTRO_RECIB_ID INT,
    DESTINO_ID INT,
    PRECIO_KILO DECIMAL,
    CONSTRAINT FK_CENTRO_RECIB_COTIZADOR FOREIGN KEY (CENTRO_RECIB_ID) REFERENCES CENTRO_RECIBOS (ID),
    CONSTRAINT FK_CIUDADES_DESTINO_COTIZADOR FOREIGN KEY (DESTINO_ID) REFERENCES CIUDADES(ID)
);

